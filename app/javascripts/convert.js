// Generated by CoffeeScript 1.10.0
(function() {
  var $, async, child_process, convert_image, convert_to_tiff, electron, fs, kdu_command, kdu_compress, pather, prettysize, settings, tempfile, tiff2rgba, update_completed_number;

  $ = require('jquery');

  tempfile = require('tempfile');

  child_process = require('child_process');

  async = require('async');

  pather = require('path');

  electron = require('electron');

  fs = require('fs');

  prettysize = require('prettysize');

  settings = electron.remote.getCurrentWindow().settings;

  convert_to_tiff = function(path, tif_tmp, async_callback) {
    var convert_cmd;
    convert_cmd = "convert " + path + " " + tif_tmp;
    return child_process.exec(convert_cmd, function(stdout, stderr) {
      console.log("tiff: " + tif_tmp);
      return async_callback();
    });
  };

  tiff2rgba = function(tif_tmp, tif_tmp_rgba, async_callback) {
    return child_process.exec("tiff2rgba -c none " + tif_tmp + " " + tif_tmp_rgba, function(stdout, stderr) {
      console.log("tiff2rgba: " + tif_tmp_rgba);
      fs.unlinkSync(tif_tmp);
      return async_callback();
    });
  };

  kdu_compress = function(tif_tmp_rgba, output_file, async_callback) {
    var cmd;
    cmd = kdu_command(tif_tmp_rgba, output_file);
    return child_process.exec(cmd, function(stdout2, stderr2) {
      console.log("jp2: " + output_file);
      fs.unlinkSync(tif_tmp_rgba);
      return async_callback();
    });
  };

  update_completed_number = function() {
    var completed_number, completed_number_text;
    completed_number_text = $('.completed_number').text();
    completed_number = !!completed_number_text ? parseInt(completed_number_text) + 1 : 1;
    $('.completed_number').html(completed_number);
    return console.log("completed_number: " + completed_number);
  };

  convert_image = function(file_row, async_callback) {
    var basename, extname, fr, jp2_file, output_dir, path, tif_tmp, tif_tmp_rgba;
    console.log(file_row);
    path = $(file_row).children('.path-to-file').text();
    tif_tmp = tempfile('.tiff');
    tif_tmp_rgba = tempfile('.tiff');
    extname = pather.extname(path);
    basename = pather.basename(path, extname);
    output_dir = settings.get('output_dir');
    jp2_file = pather.join(output_dir, basename + '.jp2');
    console.log(jp2_file);
    fr = $(file_row);
    return async.series([
      function(callback) {
        fr.find('.status').html('beginning');
        fr.find('.fa-spinner').show();
        fr.addClass('working-line');
        $('body').animate({
          scrollTop: fr.offset().top,
          100: 100
        });
        return callback();
      }, function(callback) {
        fr.find('.status').html('converting to tiff');
        return convert_to_tiff(path, tif_tmp, callback);
      }, function(callback) {
        fr.find('.status').html('ensuring rgba tiff');
        return tiff2rgba(tif_tmp, tif_tmp_rgba, callback);
      }, function(callback) {
        fr.find('.status').html('creating JP2');
        return kdu_compress(tif_tmp_rgba, jp2_file, callback);
      }, function(callback) {
        var jp2_filesize;
        fr.find('.status').html('<i class="fa fa-check"></i> completed');
        fr.find('.fa-spinner').hide();
        fr.find('.output-jp2-container').show();
        fr.find('.output-jp2').append(jp2_file);
        jp2_filesize = fs.statSync(jp2_file)["size"];
        fr.find('.jp2-filesize').html(prettysize(jp2_filesize));
        fr.removeClass('working-line');
        update_completed_number();
        console.log("original file processed: " + path);
        $('#restart').show();
        callback();
        return async_callback();
      }
    ], function(err, results) {
      return console.log([err, results]);
    });
  };

  $(document).ready(function() {
    return $("#convert-jpeg2000-command").on('click', function() {
      $('#dropzone').hide();
      $('#convert-jpeg2000-command').hide();
      $("#convert-overall-spinner").show();
      return async.eachSeries($('.file-row'), function(file_row, callback) {
        return convert_image(file_row, callback);
      }, function(err) {
        new Notification("Image processing done!");
        $('body').animate({
          scrollTop: 0
        });
        $("#convert-overall-spinner").hide();
        return $("#all-done-checkmark").show();
      });
    });
  });

  kdu_command = function(tif, output_file) {
    return "kdu_compress -rate 2.4,1.48331273,.91673033,.56657224,.35016049,.21641118,.13374944,.08266171 -precise Clevels=6 Cblk=\{64,64\} -jp2_space sRGB Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R Stiles=\{1024,1024\} -double_buffering 10 -num_threads 4 Creversible=no -no_weights -i " + tif + " -o " + output_file;
  };

}).call(this);
